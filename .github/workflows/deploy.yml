name: Deploy Production

on:
  push:
    branches:
      - main
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/deploy.yml"

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      workflow: ${{ steps.filter.outputs.workflow }}
    steps:
      - uses: actions/checkout@v5
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            workflow:
              - '.github/workflows/deploy.yml'

  deploy-backend:
    needs: changes
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.workflow == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python 3.12
        uses: actions/setup-python@v6
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Fetch secrets from AWS Secrets Manager
        run: |
          # jq 설치 (JSON 파싱용)
          sudo apt-get update && sudo apt-get install -y jq
          # Secrets Manager에서 환경변수 가져오기
          ./.scripts/fetch-secrets.sh

      - name: Deploy to production
        env:
          AWS_LAMBDA_LAYER_S3_BUCKET: shuking-lambda-deployment
        run: |
          # S3 버킷 생성 (없는 경우)
          aws s3 mb s3://shuking-lambda-deployment --region ap-northeast-2 2>/dev/null || true
          # Chalice 배포 (S3를 통해)
          chalice deploy --stage prod --connection-timeout 300

  deploy-frontend:
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.workflow == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v5
      - name: Use Node.js 20.x
        uses: actions/setup-node@v6
        with:
          node-version: 20.x

      - name: Install packages
        run: npm ci

      - name: Build for production
        run: npm run build
        env:
          CI: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Deploy to S3
        run: aws s3 sync ./dist s3://shuking.tax --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id E31QVR9HFDDSUI \
            --paths "/*"
