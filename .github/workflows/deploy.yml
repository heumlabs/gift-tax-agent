name: Deploy Production

on:
  push:
    branches:
      - main
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/deploy.yml"

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      workflow: ${{ steps.filter.outputs.workflow }}
    steps:
      - uses: actions/checkout@v5
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            workflow:
              - '.github/workflows/deploy.yml'

  deploy-backend:
    needs: changes
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.workflow == 'true'
    runs-on: ubuntu-latest
    env:
      ECR_REPOSITORY: shuking-lambda
      AWS_REGION: ap-northeast-2
      LAMBDA_FUNCTION_NAME: shuking-prod
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push Docker image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # arm64 아키텍처로 Docker 이미지 빌드 (Lambda와 일치)
          # --provenance=false --sbom=false: Lambda 호환성을 위해 추가 메타데이터 비활성화
          docker buildx build \
            --platform linux/arm64 \
            --provenance=false \
            --sbom=false \
            --push \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            .

          # 이미지 URI 출력
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update Lambda function with new image
        env:
          IMAGE_URI: ${{ steps.build-image.outputs.image }}
        run: |
          # Lambda 함수 코드 업데이트
          aws lambda update-function-code \
            --function-name $LAMBDA_FUNCTION_NAME \
            --image-uri $IMAGE_URI \
            --region $AWS_REGION

          # 코드 업데이트 완료 대기
          aws lambda wait function-updated \
            --function-name $LAMBDA_FUNCTION_NAME \
            --region $AWS_REGION

          echo "✅ Lambda function updated successfully with image: $IMAGE_URI"

      - name: Update Lambda environment variables
        run: |
          # Secrets Manager에서 모든 환경 변수 가져오기
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id arn:aws:secretsmanager:ap-northeast-2:862108802423:secret:shuking-QbyWZz \
            --query SecretString \
            --output text \
            --region $AWS_REGION)

          # 개별 환경 변수 추출
          GOOGLE_API_KEY=$(echo $SECRET_JSON | jq -r '.GOOGLE_API_KEY')
          DB_HOST=$(echo $SECRET_JSON | jq -r '.DB_HOST')
          DB_USER=$(echo $SECRET_JSON | jq -r '.DB_USER')
          DB_PASS=$(echo $SECRET_JSON | jq -r '.DB_PASS')
          DB_NAME=$(echo $SECRET_JSON | jq -r '.DB_NAME')
          APP_STAGE=$(echo $SECRET_JSON | jq -r '.APP_STAGE')

          # Lambda 환경 변수 업데이트
          aws lambda update-function-configuration \
            --function-name $LAMBDA_FUNCTION_NAME \
            --environment "Variables={
              ENVIRONMENT=prod,
              APP_STAGE=$APP_STAGE,
              GOOGLE_API_KEY=$GOOGLE_API_KEY,
              DB_HOST=$DB_HOST,
              DB_USER=$DB_USER,
              DB_PASS=$DB_PASS,
              DB_NAME=$DB_NAME,
              CORS_ALLOW_ORIGIN=https://d49mat9gykfn6.cloudfront.net
            }" \
            --region $AWS_REGION

          # 설정 업데이트 완료 대기
          aws lambda wait function-updated \
            --function-name $LAMBDA_FUNCTION_NAME \
            --region $AWS_REGION

          echo "✅ Lambda environment variables updated successfully"

  deploy-frontend:
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.workflow == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v5
      - name: Use Node.js 20.x
        uses: actions/setup-node@v6
        with:
          node-version: 20.x

      - name: Install packages
        run: npm ci

      - name: Build for production
        run: npm run build
        env:
          CI: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Deploy to S3
        run: aws s3 sync ./dist s3://shuking.tax --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id E31QVR9HFDDSUI \
            --paths "/*"
